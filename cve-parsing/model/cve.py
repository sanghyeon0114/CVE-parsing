from .problemtypes import Problemtypes
from .references import References
from .reference_tag import ReferenceTag
from .descriptions import Descriptions

from .configuration_nodes import ConfigurationNodes
from .cpe_match import CpeMatch

from .impact import Impact


# [TODO] 추후 수정 필요 ( 현재 사용하지 않음 )
class CVE:
    """Common Vulnerabilities and Exposures"""

    data_type: str
    data_format: str
    data_version: str
    CVE_data_meta_ID: str
    CVE_data_meta_ASSIGNER: str

    problemtype: list[Problemtypes]
    references: list[References]
    description: list[Descriptions]

    configurations_CVE_data_version: str
    configurations_nodes = list[ConfigurationNodes]
    cpe_match: list[CpeMatch]

    impact: Impact

    def __init__(self, item):
        cve = item['cve']
        configurations = item['configurations']
        impact = item['impact']

        self.data_type = cve['data_type']
        self.data_format = cve['data_format']
        self.data_version = cve['data_version']
        self.CVE_data_meta_ID = cve['CVE_data_meta']['ID']
        self.CVE_data_meta_ASSIGNER = cve['CVE_data_meta']['ASSIGNER']

        self.problemtype = [Problemtypes(lang=problemtype['lang'], value=problemtype['value'])
                            for problemtype in cve['problemtype']['problemtype_data'][0]['description']]

        self.references = [References(url=reference['url'], name=reference['name'], refsource=reference['refsource'], tag=[
                                      ReferenceTag(tag) for tag in reference['tags']]) for reference in cve['references']['reference_data']]

        self.description = [Descriptions(lang=description['lang'], value=description['value'])
                            for description in cve['description']['description_data']]

        self.configurations_CVE_data_version = configurations['CVE_data_version']
        self.configurations_nodes = [
            ConfigurationNodes(operator=node['operator'], children=[obj for obj in node['children']], cpe_match=[CpeMatch(vulnerable=cpe['vulnerable'], cpe23Uri=cpe['cpe23Uri'], versionStartIncluding=cpe['versionStartIncluding'], versionEndExcluding=cpe['versionEndExcluding'], metadata_title_text=None, metadata_title_locale=None, cpe_metadata_references=None, cpe_name=[name for name in cpe['cpe_name']]) for cpe in node['cpe_match']]) for node in configurations['nodes']]

        self.cpe_match = []
        nodes = configurations['nodes']
        for cpe in nodes:
            self.cpe_match.extend([CpeMatch(vulnerable=cpe['vulnerable'], cpe23Uri=cpe['cpe23Uri'], versionStartIncluding=cpe['versionStartIncluding'],
                                  versionEndExcluding=cpe['versionEndExcluding'], metadata_title_text=None, metadata_title_locale=None, cpe_metadata_references=None, cpe_name=[name for name in cpe['cpe_name']])])

        baseMetricV3 = impact['baseMetricV3']
        baseMetricV2 = impact['baseMetricV2']
        self.impact = Impact(
            baseMetricV3_cvssV3_version=baseMetricV3['cvssV3']['version'],
            baseMetricV3_cvssV3_vectorString=baseMetricV3['cvssV3']['vectorString'],
            baseMetricV3_cvssV3_baseScore=baseMetricV3['cvssV3']['baseScore'],
            baseMetricV3_cvssV3_baseSeverity=baseMetricV3['cvssV3']['baseSeverity'],
            baseMetricV3_exploitabilityScore=baseMetricV3['exploitabilityScore'],
            baseMetricV3_impactScore=baseMetricV3['impactScore'],
            baseMetricV2_cvssV2_version=baseMetricV2['cvssV2']['version'],
            baseMetricV2_cvssV2_vectorString=baseMetricV2['cvssV2']['vectorString'],
            baseMetricV2_cvssV2_baseScore=baseMetricV2['cvssV2']['baseScore'],
            baseMetricV2_severity=baseMetricV2['severity'],
            baseMetricV2_exploitabilityScore=baseMetricV2['exploitabilityScore'],
            baseMetricV2_impactScore=baseMetricV2['impactScore'],
            baseMetricV2_acInsufInfo=baseMetricV2['acInsufInfo'],
            baseMetricV2_obtainAllPrivilege=baseMetricV2['obtainAllPrivilege'],
            baseMetricV2_obtainUserPrivilege=baseMetricV2['obtainUserPrivilege'],
            baseMetricV2_obtainOtherPrivilege=baseMetricV2['obtainOtherPrivilege'],
            baseMetricV2_userInteractionRequired=baseMetricV2['userInteractionRequired']
        )

    @staticmethod
    def item2Dict(item):
        """Item -> Dictonary function"""
        cve = item['cve']
        configurations = item['configurations']
        impact = item['impact']

        return {
            # cve
            'data_type': cve['data_type'],
            'data_format': cve['data_format'],
            'data_version': cve['data_version'],
            'CVE_data_meta_ID': cve['CVE_data_meta']['ID'],
            'CVE_data_meta_ASSIGNER': cve['CVE_data_meta']['ASSIGNER'],
            # 수정 필요
            'problemtype': cve['problemtype']['problemtype_data'][0]['description'],
            'references': cve['references']['reference_data'],
            'description': cve['description']['description_data'],
            # configurations
            'configurations_CVE_data_version': configurations['CVE_data_version'],
            'configurations_nodes': configurations['nodes'],
            # impact
            'impact': impact
        }
